package io.github.mikip98.ofg.automation.dot_properties_handlers;

import net.fabricmc.loader.api.FabricLoader;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import static io.github.mikip98.del.DataExtractionLibraryClient.LOGGER;
import static io.github.mikip98.ofg.automation.FloodFill.prepareMessage;

public class PropertiesWriter {

    public static void writeToProperties(
            Map<Short, Map<String, List<String>>> floodFillEmissiveFormat1BlockEntries,
            Map<Short, Map<String, List<String>>> floodFillEmissiveFormat2BlockEntries,
            Map<Short, Map<String, List<String>>> floodFillEmissiveFormat1ItemEntries,
            Map<Short, Map<String, List<String>>> floodFillEmissiveFormat2ItemEntries,
            Map<Short, Map<String, List<String>>> floodFillTranslucentEntries,
            Map<Short, Map<String, List<String>>> floodFillIgnoreEntries
    ) {
        Path configPath = FabricLoader.getInstance().getGameDir().resolve("config/oasis-floodfill-generator");

        // Create the config directory if it doesn't exist
        try {
            Files.createDirectories(configPath);
        } catch (IOException e) {
            LOGGER.error("Error while creating config directory", e);
        }

        try (Stream<Path> paths = Files.list(configPath)) {
            paths.filter(file -> file.toString().endsWith(".properties")).forEach(propertiesPath -> {
                // Write the properties file
                StringBuilder new_properties = new StringBuilder();

                try(BufferedReader br = new BufferedReader(new FileReader(propertiesPath.toString()))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        new_properties.append(line).append("\n");
                    }
                } catch (IOException e) {
                    LOGGER.error("Error while reading properties file", e);
                }

                new_properties.append("\n\n\n# Auto Floodfill generated by 'Oasis Floodfill Generator'\n");

                new_properties.append("\n# Emissive Format 1 Block\n");
                new_properties.append("#if AUTO_GENERATED_FLOODFILL_QUALITY == 1\n");
                for (Map.Entry<Short, Map<String, List<String>>> entry : floodFillEmissiveFormat1BlockEntries.entrySet()) {
                    new_properties.append("block.").append(entry.getKey()).append(" = ").append(prepareMessage(entry.getValue())).append("\n");
                }
                new_properties.append("\n# Emissive Format 2 Block\n");
                new_properties.append("#elif AUTO_GENERATED_FLOODFILL_QUALITY == 2\n");
                for (Map.Entry<Short, Map<String, List<String>>> entry : floodFillEmissiveFormat2BlockEntries.entrySet()) {
                    new_properties.append("block.").append(entry.getKey()).append(" = ").append(prepareMessage(entry.getValue())).append("\n");
                }
//                new_properties.append("\n# Emissive Format 3 Block\n");
//                new_properties.append("#elif AUTO_GENERATED_FLOODFILL_QUALITY == 3\n");
//                for (Map.Entry<Short, Map<String, List<String>>> entry : floodFillEmissiveFormat1BlockEntries.entrySet()) {
//                    new_properties.append("block.").append(entry.getKey()).append(" = ").append(prepareMessage(entry.getValue())).append("\n");
//                }
                new_properties.append("#endif\n");

                new_properties.append("\n# Translucent\n");
                for (Map.Entry<Short, Map<String, List<String>>> entry : floodFillTranslucentEntries.entrySet()) {
                    new_properties.append("block.").append(entry.getKey()).append(" = ").append(prepareMessage(entry.getValue())).append("\n");
                }

                new_properties.append("\n# Ignored by Floodfill\n");
                for (Map.Entry<Short, Map<String, List<String>>> entry : floodFillIgnoreEntries.entrySet()) {
                    new_properties.append("block.").append(entry.getKey()).append(" = ").append(prepareMessage(entry.getValue())).append("\n");
                }

                try {
                    Files.write(propertiesPath, new_properties.toString().getBytes());
                } catch (IOException e) {
                    LOGGER.error("Error while writing properties file", e);
                }
            });
        } catch (IOException e) {
            LOGGER.error("Error while writing properties file", e);
        }
    }
}
